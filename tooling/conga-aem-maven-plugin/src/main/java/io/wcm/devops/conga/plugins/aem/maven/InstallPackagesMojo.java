/*
 * #%L
 * wcm.io
 * %%
 * Copyright (C) 2017 wcm.io
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package io.wcm.devops.conga.plugins.aem.maven;

import static io.wcm.devops.conga.generator.util.FileUtil.getCanonicalPath;

import java.io.File;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

import io.wcm.devops.conga.plugins.aem.maven.model.ModelContentPackageFile;
import io.wcm.devops.conga.plugins.aem.maven.model.ModelParser;
import io.wcm.tooling.commons.packmgr.install.PackageFile;
import io.wcm.tooling.commons.packmgr.install.PackageInstaller;

/**
 * Installs all AEM content packages to AEM which are referenced in a model.yaml generated by CONGA for a node.
 */
@Mojo(name = "package-install", threadSafe = true, requiresProject = false)
public final class InstallPackagesMojo extends AbstractContentPackageMojo {

  /**
   * Directory with the generated CONGA configuration containing the model.yaml.
   */
  @Parameter(required = true, property = "conga.nodeDirectory")
  private File nodeDirectory;

  /**
   * Whether to install (unpack) the uploaded package automatically or not.
   */
  @Parameter(property = "vault.install", defaultValue = "true")
  private boolean install;

  /**
   * Force upload and install of content package. If set to:
   * <ul>
   * <li><code>true</code>: Package is always installed, even if it was already uploaded before.</li>
   * <li><code>false</code>: Package is only installed if it was not already uploade before.</li>
   * <li>nothing (default): Force is applied to packages with the string "-SNAPSHOT" in it's filename.</li>
   * </ul>
   */
  @Parameter(property = "vault.force")
  private Boolean force;

  /**
   * If set to true nested packages get installed as well.
   */
  @Parameter(property = "vault.recursive", defaultValue = "true")
  private boolean recursive;

  /**
   * Delay further steps after package installation by this amount of seconds
   */
  @Parameter(property = "vault.delayAfterInstallSec")
  private Integer delayAfterInstallSec;

  /**
   * Replicate package(s) to publish instance after upload.
   */
  @Parameter(property = "vault.replicatePackage")
  private boolean replicate;

  @Override
  public void execute() throws MojoExecutionException, MojoFailureException {
    if (isSkip()) {
      return;
    }

    if (!nodeDirectory.exists() || !nodeDirectory.isDirectory()) {
      throw new MojoFailureException("Node directory not found: " + getCanonicalPath(nodeDirectory));
    }

    getLog().info("Get AEM content packages from " + getCanonicalPath(nodeDirectory));

    // collect files to install
    ModelParser modelParser = new ModelParser();
    List<PackageFile> items = modelParser.getContentPackagesForNode(nodeDirectory).stream()
        .map(this::toPackageFile)
        .collect(Collectors.toList());

    // ensure any file exist
    if (items.isEmpty()) {
      getLog().warn("No file found for installing.");
      return;
    }

    // install files
    PackageInstaller installer = new PackageInstaller(getPackageManagerProperties());
    installer.setReplicate(this.replicate);
    installer.installFiles(items);
  }

  private PackageFile toPackageFile(ModelContentPackageFile item) {
    PackageFile output = new PackageFile();

    output.setFile(item.getFile());
    if (item.getInstall() != null) {
      output.setInstall(item.getInstall());
    }
    else {
      output.setInstall(this.install);
    }
    if (item.getForce() != null) {
      output.setForce(item.getForce());
    }
    else {
      output.setForce(this.force);
    }
    if (item.getRecursive() != null) {
      output.setRecursive(item.getRecursive());
    }
    else {
      output.setRecursive(this.recursive);
    }
    if (item.getDelayAfterInstallSec() != null) {
      output.setDelayAfterInstallSec(item.getDelayAfterInstallSec());
    }
    else if (this.delayAfterInstallSec != null) {
      output.setDelayAfterInstallSec(this.delayAfterInstallSec);
    }
    else {
      output.setDelayAfterInstallSecAutoDetect();
    }
    output.setHttpSocketTimeoutSec(item.getHttpSocketTimeoutSec());

    return output;
  }

}
