/*
 * #%L
 * wcm.io
 * %%
 * Copyright (C) 2020 wcm.io
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package io.wcm.devops.conga.plugins.aem.maven.model;

import static io.wcm.devops.conga.generator.util.FileUtil.getCanonicalPath;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.yaml.snakeyaml.Yaml;

import io.wcm.devops.conga.model.util.MapExpander;
import io.wcm.devops.conga.plugins.aem.postprocessor.ContentPackagePropertiesPostProcessor;

/**
 * Parsers model.yaml files generated by CONGA.
 */
public final class ModelParser {

  /**
   * Model file.
   */
  public static final String MODEL_FILE = "model.yaml";

  private static final String PROP_ROLES = "roles";
  private static final String PROP_ROLE = "role";
  private static final String PROP_CONFIG = "config";
  private static final String PROP_FILES = "files";

  private final Yaml yaml;
  private final File nodeDir;
  private final Map<String, Object> modelData;

  /**
   * @param nodeDir Node directory
   */
  public ModelParser(File nodeDir) {
    this.yaml = YamlUtil.createYaml();
    this.nodeDir = nodeDir;
    this.modelData = getModelData();
  }

  /**
   * Returns all content packages references in this fileData.
   * @return List of content packages
   */
  public List<ModelContentPackageFile> getContentPackagesForNode() {
    return collectPackages();
  }

  /**
   * Checks if the node has the given node role assigned.
   * @param roleName Node role name
   * @return true if role is assigned
   */
  @SuppressWarnings("unchecked")
  public boolean hasRole(String roleName) {
    List<Map<String, Object>> roles = (List<Map<String, Object>>)modelData.get(PROP_ROLES);
    for (Map<String, Object> role : roles) {
      if (StringUtils.equals(Objects.toString(role.get(PROP_ROLE), null), roleName)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Collects all assigned "cloudManager.target" values (lists or single values) to any role from the node.
   * @return List of cloud manager environment names or "none"
   */
  @SuppressWarnings("unchecked")
  public Set<String> getCloudManagerTarget() {
    Set<String> targets = new LinkedHashSet<>();
    List<Map<String, Object>> roles = (List<Map<String, Object>>)modelData.get(PROP_ROLES);
    for (Map<String, Object> role : roles) {
      Map<String, Object> config = (Map<String, Object>)role.get(PROP_CONFIG);
      if (config != null) {
        Object targetValue = MapExpander.getDeep(config, "cloudManager.target");
        if (targetValue != null) {
          return toStringSet(targetValue);
        }
      }
    }
    return targets;
  }

  @SuppressWarnings("unchecked")
  private static Set<String> toStringSet(Object value) {
    Set<String> result = new LinkedHashSet<>();
    if (value instanceof String) {
      String target = (String)value;
      if (StringUtils.isNotBlank(target)) {
        result.add(target);
      }
    }
    else if (value instanceof List) {
      result.addAll(((List<String>)value).stream()
          .filter(StringUtils::isNotBlank)
          .collect(Collectors.toList()));
    }
    else {
      throw new IllegalArgumentException("Value is neither string nor string list: " + value);
    }
    return result;
  }

  private Map<String, Object> getModelData() {
    File modelFile = new File(nodeDir, MODEL_FILE);
    if (!modelFile.exists() || !modelFile.isFile()) {
      throw new RuntimeException("Model file not found: " + getCanonicalPath(modelFile));
    }
    return parseYaml(modelFile);
  }

  @SuppressWarnings("unchecked")
  private Map<String, Object> parseYaml(File modelFile) {
    try {
      try (InputStream is = new FileInputStream(modelFile);
          Reader reader = new InputStreamReader(is, StandardCharsets.UTF_8)) {
        return yaml.loadAs(reader, Map.class);
      }
    }
    catch (IOException ex) {
      throw new RuntimeException("Unable to parse " + getCanonicalPath(modelFile), ex);
    }
  }

  @SuppressWarnings("unchecked")
  private List<ModelContentPackageFile> collectPackages() {
    List<ModelContentPackageFile> items = new ArrayList<>();
    List<Map<String, Object>> roles = (List<Map<String, Object>>)modelData.get(PROP_ROLES);
    if (roles != null) {
      for (Map<String, Object> role : roles) {
        List<Map<String, Object>> files = (List<Map<String, Object>>)role.get(PROP_FILES);
        if (files != null) {
          for (Map<String, Object> file : files) {
            if (file.get(ContentPackagePropertiesPostProcessor.MODEL_OPTIONS_PROPERTY) != null) {
              items.add(toContentPackageFile(file, role));
            }
          }
        }
      }
    }
    return items;
  }

  private ModelContentPackageFile toContentPackageFile(Map<String, Object> fileData,
      Map<String, Object> roleData) {
    String path = Objects.toString(fileData.get("path"), null);
    File file = new File(nodeDir, path);
    return new ModelContentPackageFile(file, fileData, roleData);
  }

}
